//给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。

//解题思路: 如果一个字符串由多个重复子串构成,则具有循环节.  设循环节为a,重复n次,a*n = s     
//         找循环节比较麻烦,最简单的方法就是 s+s 增加一倍的循环节
//比如 s=aaaa 则s+s=aaaa aaaa
//因为是不断重复的循环节,屏蔽掉第一个字符,在ss中寻找s,因为屏蔽了第一个,所以第一个最小循环节s被破坏
//所以s应该从第二个循环节开始
//如果ss具有循环节,那么找到的下标肯定是第二个循环节开始
//如果ss不具有循环节,比如ss=abcd abcd,那么找到的下标肯定是第二个子串开头,即s.size()处

class Solution {
public:
    bool repeatedSubstringPattern(string s) {
           
            return (s+s).find(s,1)!=s.size();
    }
};
